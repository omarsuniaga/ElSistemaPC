/**
 * Script de Validaci√≥n del Sistema de Permisos
 * 
 * Este script valida que el sistema de permisos est√© correctamente configurado
 * y funcionando seg√∫n la documentaci√≥n de roles y permisos.
 */

import { initializeApp } from 'firebase/app'
import { getFirestore } from 'firebase/firestore'
import { UserRole } from '../src/modulos/Auth/types/permissions'
import { PermissionsService } from '../src/modulos/Auth/services/permissionsService'

// ========== TESTS DE VALIDACI√ìN ==========

/**
 * Valida que todos los roles tengan su configuraci√≥n
 */
async function validateRolesConfiguration() {
  console.log('üîç Validando configuraci√≥n de roles...')
  
  try {
    for (const role of Object.values(UserRole)) {
      console.log(`  Validando rol: ${role}`)
      
      // Verificar permisos del rol
      const permissions = await PermissionsService.getRolePermissions(role)
      if (!permissions) {
        throw new Error(`No se encontraron permisos para el rol: ${role}`)
      }
      
      // Verificar configuraci√≥n de reportes
      const reports = await PermissionsService.getRoleReportsConfig(role)
      if (!reports) {
        throw new Error(`No se encontr√≥ configuraci√≥n de reportes para: ${role}`)
      }
      
      // Verificar configuraci√≥n de m√≥dulos
      const modules = await PermissionsService.getRoleModulesConfig(role)
      if (!modules) {
        throw new Error(`No se encontr√≥ configuraci√≥n de m√≥dulos para: ${role}`)
      }
      
      console.log(`  ‚úÖ ${role}: Configuraci√≥n completa`)
    }
    
    console.log('‚úÖ Configuraci√≥n de roles: V√ÅLIDA')
    
  } catch (error) {
    console.error('‚ùå Error en configuraci√≥n de roles:', error)
    throw error
  }
}

/**
 * Valida permisos espec√≠ficos seg√∫n la documentaci√≥n
 */
async function validateSpecificPermissions() {
  console.log('üîç Validando permisos espec√≠ficos seg√∫n documentaci√≥n...')
  
  try {
    // ========== VALIDAR PERMISOS DE MAESTRO ==========
    console.log('  Validando permisos de Maestro...')
    
    const maestroPermissions = await PermissionsService.getRolePermissions(UserRole.MAESTRO)
    
    // Permisos que DEBE tener
    const maestroMustHave = [
      'puedeVerPerfilAlumno',
      'puedeEditarMontaje',
      'puedeRegistrarAsistencia',
      'puedeEditarAsistencia',
      'puedeCrearObservaciones',
      'puedeEditarObservaciones',
      'puedeEvaluarAlumnos'
    ]
    
    for (const permission of maestroMustHave) {
      if (!maestroPermissions[permission]) {
        throw new Error(`Maestro debe tener permiso: ${permission}`)
      }
    }
    
    // Permisos que NO debe tener
    const maestroMustNotHave = [
      'puedeGenerarReportes',
      'puedeVerInfoConfidencialAlumno',
      'puedeEvaluarMaestros',
      'puedeAsignarClases'
    ]
    
    for (const permission of maestroMustNotHave) {
      if (maestroPermissions[permission] === true) {
        throw new Error(`Maestro NO debe tener permiso: ${permission}`)
      }
    }
    
    // Verificar alcance
    if (maestroPermissions.alcance !== 'clase') {
      throw new Error(`Maestro debe tener alcance 'clase', encontrado: ${maestroPermissions.alcance}`)
    }
    
    console.log('  ‚úÖ Permisos de Maestro: V√ÅLIDOS')
    
    // ========== VALIDAR PERMISOS DE DIRECTOR ==========
    console.log('  Validando permisos de Director...')
    
    const directorPermissions = await PermissionsService.getRolePermissions(UserRole.DIRECTOR)
    
    // Permisos que DEBE tener
    const directorMustHave = [
      'puedeGenerarReportes',
      'puedeVerInfoConfidencialAlumno',
      'puedeEditarObras',
      'puedeEvaluarMaestros',
      'puedeAsignarClases',
      'puedeCrearColaboradoresTemporales',
      'puedeSupervisionGlobal'
    ]
    
    for (const permission of directorMustHave) {
      if (!directorPermissions[permission]) {
        throw new Error(`Director debe tener permiso: ${permission}`)
      }
    }
    
    // Verificar alcance
    if (directorPermissions.alcance !== 'global') {
      throw new Error(`Director debe tener alcance 'global', encontrado: ${directorPermissions.alcance}`)
    }
    
    console.log('  ‚úÖ Permisos de Director: V√ÅLIDOS')
    
    console.log('‚úÖ Permisos espec√≠ficos: V√ÅLIDOS')
    
  } catch (error) {
    console.error('‚ùå Error en permisos espec√≠ficos:', error)
    throw error
  }
}

/**
 * Valida configuraci√≥n de reportes seg√∫n documentaci√≥n
 */
async function validateReportsConfiguration() {
  console.log('üîç Validando configuraci√≥n de reportes...')
  
  try {
    // ========== REPORTES DE MAESTRO ==========
    const maestroReports = await PermissionsService.getRoleReportsConfig(UserRole.MAESTRO)
    
    if (maestroReports.alcanceReportes !== 'clase') {
      throw new Error(`Maestro debe tener alcance de reportes 'clase'`)
    }
    
    // ========== REPORTES DE DIRECTOR ==========
    const directorReports = await PermissionsService.getRoleReportsConfig(UserRole.DIRECTOR)
    
    if (directorReports.alcanceReportes !== 'global') {
      throw new Error(`Director debe tener alcance de reportes 'global'`)
    }
    
    // Verificar que Director tenga todos los tipos de reportes documentados
    const requiredDirectorReports = [
      'asistencia_diaria',
      'asistencia_mensual',
      'progreso_por_alumno',
      'listados_por_clase',
      'horarios_por_alumno',
      'obras_trabajadas',
      'analisis_desempeno_general'
    ]
    
    for (const report of requiredDirectorReports) {
      if (!directorReports.reportesDisponibles.includes(report)) {
        console.warn(`‚ö†Ô∏è  Director podr√≠a incluir reporte: ${report}`)
      }
    }
    
    console.log('‚úÖ Configuraci√≥n de reportes: V√ÅLIDA')
    
  } catch (error) {
    console.error('‚ùå Error en configuraci√≥n de reportes:', error)
    throw error
  }
}

/**
 * Valida el funcionamiento de la verificaci√≥n de permisos
 */
async function validatePermissionChecking() {
  console.log('üîç Validando funcionamiento de verificaci√≥n de permisos...')
  
  try {
    // Simular usuarios de prueba
    const testUsers = [
      { id: 'maestro_test', role: UserRole.MAESTRO },
      { id: 'director_test', role: UserRole.DIRECTOR }
    ]
    
    for (const user of testUsers) {
      console.log(`  Probando usuario: ${user.id} (${user.role})`)
      
      // Probar verificaci√≥n b√°sica
      const canGenerateReports = await PermissionsService.checkUserPermission(
        user.id,
        user.role,
        'puedeGenerarReportes'
      )
      
      if (user.role === UserRole.MAESTRO && canGenerateReports) {
        throw new Error(`Maestro no deber√≠a poder generar reportes`)
      }
      
      if (user.role === UserRole.DIRECTOR && !canGenerateReports) {
        throw new Error(`Director deber√≠a poder generar reportes`)
      }
      
      // Probar permisos efectivos
      const effectivePermissions = await PermissionsService.getUserEffectivePermissions(
        user.id,
        user.role
      )
      
      if (!effectivePermissions._metadata) {
        throw new Error(`Permisos efectivos deben incluir metadatos`)
      }
      
      console.log(`  ‚úÖ ${user.id}: Verificaci√≥n funcional`)
    }
    
    console.log('‚úÖ Verificaci√≥n de permisos: FUNCIONAL')
    
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n de permisos:', error)
    throw error
  }
}

/**
 * Genera reporte de validaci√≥n completo
 */
async function generateValidationReport() {
  console.log('üìä Generando reporte de validaci√≥n...')
  
  try {
    const report = {
      timestamp: new Date().toISOString(),
      status: 'SUCCESS',
      roles: {},
      systemConfig: {},
      summary: {
        rolesValidated: 0,
        permissionsChecked: 0,
        reportsValidated: 0,
        issuesFound: 0
      }
    }
    
    // Recopilar informaci√≥n de cada rol
    for (const role of Object.values(UserRole)) {
      const roleConfig = await PermissionsService.getFullRoleConfiguration(role)
      report.roles[role] = {
        permissions: Object.keys(roleConfig.permissions).length,
        reports: roleConfig.reports?.reportesDisponibles?.length || 0,
        modules: roleConfig.modules?.modulosPermitidos?.length || 0,
        scope: roleConfig.permissions.alcance
      }
      report.summary.rolesValidated++
    }
    
    // Configuraci√≥n del sistema
    const systemConfig = await PermissionsService.getSystemPermissionsConfig()
    report.systemConfig = systemConfig
    
    console.log('')
    console.log('üìã REPORTE DE VALIDACI√ìN')
    console.log('========================')
    console.log(`üïê Timestamp: ${report.timestamp}`)
    console.log(`‚úÖ Estado: ${report.status}`)
    console.log(`üë• Roles validados: ${report.summary.rolesValidated}`)
    console.log('')
    
    for (const [role, config] of Object.entries(report.roles)) {
      console.log(`üîπ ${role}:`)
      console.log(`   ‚Ä¢ Permisos: ${config.permissions}`)
      console.log(`   ‚Ä¢ Reportes: ${config.reports}`)
      console.log(`   ‚Ä¢ M√≥dulos: ${config.modules}`)
      console.log(`   ‚Ä¢ Alcance: ${config.scope}`)
    }
    
    console.log('')
    console.log('üéâ ¬°Sistema de permisos completamente validado!')
    
    return report
    
  } catch (error) {
    console.error('‚ùå Error generando reporte:', error)
    throw error
  }
}

/**
 * Funci√≥n principal de validaci√≥n
 */
async function validatePermissionsSystem() {
  try {
    console.log('üöÄ Iniciando validaci√≥n del sistema de permisos...')
    console.log('')
    
    await validateRolesConfiguration()
    console.log('')
    
    await validateSpecificPermissions()
    console.log('')
    
    await validateReportsConfiguration()
    console.log('')
    
    await validatePermissionChecking()
    console.log('')
    
    const report = await generateValidationReport()
    
    console.log('')
    console.log('‚ú® ¬°Validaci√≥n completada exitosamente!')
    console.log('üìù El sistema de permisos est√° funcionando correctamente seg√∫n la documentaci√≥n.')
    
    return report
    
  } catch (error) {
    console.error('')
    console.error('üí• ¬°Error en la validaci√≥n del sistema!')
    console.error('üîß Verifica la configuraci√≥n y ejecuta el script de setup si es necesario.')
    console.error('')
    console.error('Error:', error.message)
    throw error
  }
}

// ========== EJECUCI√ìN ==========
if (import.meta.url === `file://${process.argv[1]}`) {
  validatePermissionsSystem()
    .then(() => {
      console.log('')
      console.log('üéØ Pr√≥ximos pasos:')
      console.log('   1. Integrar PermissionGuard en componentes existentes')
      console.log('   2. Actualizar stores para usar usePermissions()')
      console.log('   3. Migrar l√≥gica de permisos existente al nuevo sistema')
      console.log('   4. Probar flujos completos en el navegador')
      process.exit(0)
    })
    .catch((error) => {
      process.exit(1)
    })
}

export { validatePermissionsSystem }
