/**
 * Script de verificaci√≥n r√°pida de configuraci√≥n
 */

import {config} from "dotenv"
import fs from "fs"
import path from "path"

// Cargar variables de entorno
config()

console.log("üîç Verificando configuraci√≥n...\n")

// Verificar variables de entorno
const requiredVars = [
  "VITE_APP_API_KEY",
  "VITE_APP_AUTH_DOMAIN",
  "VITE_APP_PROJECT_ID",
  "VITE_APP_STORAGE_BUCKET",
  "VITE_APP_MESSAGING_SENDER_ID",
  "VITE_APP_APP_ID",
]

console.log("üîë Variables de entorno:")
requiredVars.forEach((varName) => {
  const value = process.env[varName]
  const status = value ? "‚úÖ" : "‚ùå"
  const display = value ? `${value.substring(0, 20)}...` : "NO DEFINIDA"
  console.log(`${status} ${varName}: ${display}`)
})

// Verificar archivo CSV
console.log("\nüìÑ Archivo CSV:")
const csvPath = path.join(process.cwd(), "INTEGRANTES_EL_SISTEMA_PUNTA_CANA.csv")
if (fs.existsSync(csvPath)) {
  const stats = fs.statSync(csvPath)
  const content = fs.readFileSync(csvPath, "utf-8")
  const lines = content.split("\n").filter((line) => line.trim() !== "")

  console.log("‚úÖ INTEGRANTES_EL_SISTEMA_PUNTA_CANA.csv encontrado")
  console.log(`üìä Tama√±o: ${(stats.size / 1024).toFixed(2)} KB`)
  console.log(`üìù L√≠neas: ${lines.length} (${lines.length - 1} estudiantes)`)

  if (lines.length > 0) {
    console.log(`üìã Header: ${lines[0]}`)
  }

  if (lines.length > 1) {
    console.log(`üìù Ejemplo: ${lines[1]}`)
  }
} else {
  console.log("‚ùå Archivo CSV no encontrado")
  console.log(`üìç Esperado en: ${csvPath}`)
}

// Verificar directorio de backups
console.log("\nüìÅ Directorio de backups:")
const backupsDir = path.join(process.cwd(), "backups")
if (fs.existsSync(backupsDir)) {
  const files = fs.readdirSync(backupsDir)
  console.log(`‚úÖ Directorio existe con ${files.length} archivos`)

  const backupFiles = files.filter((f) => f.startsWith("backup-alumnos-"))
  if (backupFiles.length > 0) {
    console.log(`üì¶ Backups existentes: ${backupFiles.length}`)
    console.log(`üìÖ M√°s reciente: ${backupFiles[backupFiles.length - 1]}`)
  }
} else {
  console.log("üìÅ Directorio no existe (se crear√° autom√°ticamente)")
}

console.log("\nüéØ Estado de configuraci√≥n:")
const hasAllVars = requiredVars.every((varName) => process.env[varName])
const hasCSV = fs.existsSync(csvPath)

if (hasAllVars && hasCSV) {
  console.log("‚úÖ Configuraci√≥n completa - Listo para migraci√≥n")
} else {
  console.log("‚ö†Ô∏è Configuraci√≥n incompleta:")
  if (!hasAllVars) console.log("   - Faltan variables de entorno")
  if (!hasCSV) console.log("   - Falta archivo CSV")
}
