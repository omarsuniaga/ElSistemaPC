// Script para limpiar notificaciones inv√°lidas existentes en la base de datos
// Ejecutar en la consola del navegador cuando est√© logueado como administrador

async function cleanupInvalidNotifications() {
  console.log("üßπ Iniciando limpieza de notificaciones inv√°lidas...")

  try {
    // Importar Firebase
    const {collection, query, where, getDocs, doc, updateDoc, deleteDoc} = await import(
      "firebase/firestore"
    )
    const {db} = await import("./src/firebase.js")

    console.log("üìã Buscando notificaciones inv√°lidas...")

    // Buscar notificaciones de maestros inv√°lidas
    const teacherNotificationsQuery = query(
      collection(db, "TEACHER_NOTIFICATIONS"),
      where("status", "==", "invalid")
    )

    const teacherNotificationsSnapshot = await getDocs(teacherNotificationsQuery)
    console.log(
      `üìä Encontradas ${teacherNotificationsSnapshot.size} notificaciones de maestros inv√°lidas`
    )

    // Buscar notificaciones generales inv√°lidas
    const generalNotificationsQuery = query(
      collection(db, "GENERAL_NOTIFICATIONS"),
      where("status", "==", "invalid")
    )

    const generalNotificationsSnapshot = await getDocs(generalNotificationsQuery)
    console.log(
      `üìä Encontradas ${generalNotificationsSnapshot.size} notificaciones generales inv√°lidas`
    )

    // Opci√≥n 1: Eliminar completamente las notificaciones inv√°lidas
    const deleteInvalid = confirm(
      "¬øDeseas ELIMINAR completamente las notificaciones inv√°lidas? (Recomendado)"
    )

    if (deleteInvalid) {
      console.log("üóëÔ∏è Eliminando notificaciones inv√°lidas...")

      // Eliminar notificaciones de maestros inv√°lidas
      for (const docSnapshot of teacherNotificationsSnapshot.docs) {
        await deleteDoc(doc(db, "TEACHER_NOTIFICATIONS", docSnapshot.id))
        console.log(`‚úÖ Eliminada notificaci√≥n de maestro: ${docSnapshot.id}`)
      }

      // Eliminar notificaciones generales inv√°lidas
      for (const docSnapshot of generalNotificationsSnapshot.docs) {
        await deleteDoc(doc(db, "GENERAL_NOTIFICATIONS", docSnapshot.id))
        console.log(`‚úÖ Eliminada notificaci√≥n general: ${docSnapshot.id}`)
      }

      console.log("üéâ Limpieza completada. Todas las notificaciones inv√°lidas han sido eliminadas.")
    } else {
      // Opci√≥n 2: Solo marcar como limpiadas (mantener para auditor√≠a)
      console.log("üè∑Ô∏è Marcando notificaciones inv√°lidas como limpiadas...")

      for (const docSnapshot of teacherNotificationsSnapshot.docs) {
        await updateDoc(doc(db, "TEACHER_NOTIFICATIONS", docSnapshot.id), {
          status: "cleaned",
          cleanedAt: new Date(),
          cleanedBy: "admin-script",
        })
        console.log(`üè∑Ô∏è Marcada como limpiada: ${docSnapshot.id}`)
      }

      for (const docSnapshot of generalNotificationsSnapshot.docs) {
        await updateDoc(doc(db, "GENERAL_NOTIFICATIONS", docSnapshot.id), {
          status: "cleaned",
          cleanedAt: new Date(),
          cleanedBy: "admin-script",
        })
        console.log(`üè∑Ô∏è Marcada como limpiada: ${docSnapshot.id}`)
      }

      console.log(
        "üéâ Marcado completado. Las notificaciones inv√°lidas han sido marcadas como limpiadas."
      )
    }

    console.log("‚úÖ Proceso de limpieza terminado exitosamente.")
  } catch (error) {
    console.error("‚ùå Error durante la limpieza:", error)
  }
}

async function listInvalidNotifications() {
  console.log("üìã Listando notificaciones inv√°lidas...")

  try {
    const {collection, query, where, getDocs} = await import("firebase/firestore")
    const {db} = await import("./src/firebase.js")

    // Buscar notificaciones de maestros inv√°lidas
    const teacherNotificationsQuery = query(
      collection(db, "TEACHER_NOTIFICATIONS"),
      where("status", "==", "invalid")
    )

    const teacherNotificationsSnapshot = await getDocs(teacherNotificationsQuery)

    console.log("üßë‚Äçüè´ Notificaciones de maestros inv√°lidas:")
    teacherNotificationsSnapshot.docs.forEach((doc) => {
      const data = doc.data()
      console.log(`  üìÑ ID: ${doc.id}`)
      console.log(`     Tipo: ${data.type}`)
      console.log(`     T√≠tulo: ${data.title}`)
      console.log(`     Clase ID: ${data.classId || "N/A"}`)
      console.log(`     Maestro ID: ${data.teacherId}`)
      console.log(`     Fecha: ${data.createdAt?.toDate?.() || data.createdAt}`)
      console.log(`     Raz√≥n inv√°lida: ${data.invalidReason || "No especificada"}`)
      console.log("")
    })

    // Buscar notificaciones generales inv√°lidas
    const generalNotificationsQuery = query(
      collection(db, "GENERAL_NOTIFICATIONS"),
      where("status", "==", "invalid")
    )

    const generalNotificationsSnapshot = await getDocs(generalNotificationsQuery)

    console.log("üì¢ Notificaciones generales inv√°lidas:")
    generalNotificationsSnapshot.docs.forEach((doc) => {
      const data = doc.data()
      console.log(`  üìÑ ID: ${doc.id}`)
      console.log(`     Tipo: ${data.type}`)
      console.log(`     T√≠tulo: ${data.title}`)
      console.log(`     Maestro ID: ${data.teacherId}`)
      console.log(`     Fecha: ${data.createdAt?.toDate?.() || data.createdAt}`)
      console.log("")
    })

    console.log(
      `üìä Total: ${teacherNotificationsSnapshot.size + generalNotificationsSnapshot.size} notificaciones inv√°lidas`
    )
  } catch (error) {
    console.error("‚ùå Error listando notificaciones:", error)
  }
}

// Exportar funciones
window.cleanupInvalidNotifications = cleanupInvalidNotifications
window.listInvalidNotifications = listInvalidNotifications

console.log("üîß Scripts de limpieza de notificaciones cargados.")
console.log("üìù Uso:")
console.log("  - listInvalidNotifications(): Lista todas las notificaciones inv√°lidas")
console.log("  - cleanupInvalidNotifications(): Limpia las notificaciones inv√°lidas")
console.log("")
console.log("‚ö†Ô∏è  Ejecutar solo cuando est√©s logueado como administrador")
