// SCRIPT DE TESTING B√ÅSICO PARA FASE 1
// Ejecutar en la consola del navegador

console.log('üß™ INICIANDO TESTS DE FASE 1 - GESTI√ìN AVANZADA DE ESTUDIANTES');
console.log('================================================================');

// Test 1: Verificar que la ruta funciona
const testRouting = () => {
  console.log('üìç Test 1: Verificando routing...');

  try {
    // Intentar navegar a la ruta avanzada
    const currentPath = window.location.pathname;
    console.log(`   Ruta actual: ${currentPath}`);

    if (currentPath.includes('/admin/students/advanced')) {
      console.log('   ‚úÖ Ruta de gesti√≥n avanzada activa');
      return true;
    } else {
      console.log('   ‚ö†Ô∏è No est√°s en la ruta de gesti√≥n avanzada');
      console.log('   üí° Navega a /admin/students/advanced para testear');
      return false;
    }
  } catch (error) {
    console.log('   ‚ùå Error en routing:', error);
    return false;
  }
};

// Test 2: Verificar componente en DOM
const testComponent = () => {
  console.log('üß© Test 2: Verificando componente en DOM...');

  try {
    const component = document.querySelector('.advanced-students-management');

    if (component) {
      console.log('   ‚úÖ Componente AdvancedStudentsManagement encontrado en DOM');

      // Verificar sub-elementos
      const toolbar = component.querySelector('.management-toolbar');
      const table = component.querySelector('.students-table');
      const header = component.querySelector('.management-header');

      console.log(`   üìä Header: ${header ? '‚úÖ' : '‚ùå'}`);
      console.log(`   üîß Toolbar: ${toolbar ? '‚úÖ' : '‚ùå'}`);
      console.log(`   üìã Tabla: ${table ? '‚úÖ' : '‚ùå'}`);

      return true;
    } else {
      console.log('   ‚ùå Componente no encontrado en DOM');
      return false;
    }
  } catch (error) {
    console.log('   ‚ùå Error verificando componente:', error);
    return false;
  }
};

// Test 3: Verificar funcionalidad de b√∫squeda
const testSearch = () => {
  console.log('üîç Test 3: Verificando funcionalidad de b√∫squeda...');

  try {
    const searchInput = document.querySelector('input[placeholder*="Buscar"]');

    if (searchInput) {
      console.log('   ‚úÖ Campo de b√∫squeda encontrado');

      // Simular b√∫squeda
      searchInput.value = 'test';
      searchInput.dispatchEvent(new Event('input'));

      console.log('   ‚úÖ Evento de b√∫squeda simulado');
      return true;
    } else {
      console.log('   ‚ùå Campo de b√∫squeda no encontrado');
      return false;
    }
  } catch (error) {
    console.log('   ‚ùå Error en funcionalidad de b√∫squeda:', error);
    return false;
  }
};

// Test 4: Verificar botones de acci√≥n
const testActions = () => {
  console.log('‚ö° Test 4: Verificando botones de acci√≥n...');

  try {
    const importBtn = document.querySelector('button:has([class*="ArrowUpTray"])');
    const exportBtn = document.querySelector('button:has([class*="ArrowDownTray"])');
    const createBtn = document.querySelector('button:has([class*="Plus"])');

    console.log(`   üì• Bot√≥n Importar: ${importBtn ? '‚úÖ' : '‚ùå'}`);
    console.log(`   üì§ Bot√≥n Exportar: ${exportBtn ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚ûï Bot√≥n Crear: ${createBtn ? '‚úÖ' : '‚ùå'}`);

    return importBtn && exportBtn && createBtn;
  } catch (error) {
    console.log('   ‚ùå Error verificando botones:', error);
    return false;
  }
};

// Test 5: Verificar m√©tricas en header
const testMetrics = () => {
  console.log('üìä Test 5: Verificando m√©tricas en header...');

  try {
    const metrics = document.querySelectorAll('.metric-card');

    if (metrics.length > 0) {
      console.log(`   ‚úÖ ${metrics.length} m√©tricas encontradas`);

      metrics.forEach((metric, index) => {
        const value = metric.querySelector('.metric-value');
        const label = metric.querySelector('.metric-label');

        if (value && label) {
          console.log(`   üìà M√©trica ${index + 1}: ${label.textContent} = ${value.textContent}`);
        }
      });

      return true;
    } else {
      console.log('   ‚ùå No se encontraron m√©tricas');
      return false;
    }
  } catch (error) {
    console.log('   ‚ùå Error verificando m√©tricas:', error);
    return false;
  }
};

// Test 6: Verificar responsive design
const testResponsive = () => {
  console.log('üì± Test 6: Verificando dise√±o responsive...');

  try {
    const component = document.querySelector('.advanced-students-management');

    if (component) {
      const styles = window.getComputedStyle(component);
      const isFlexColumn = styles.flexDirection === 'column';
      const hasGap = styles.gap !== '' && styles.gap !== 'normal';

      console.log(`   üìê Flex Direction: ${styles.flexDirection} ${isFlexColumn ? '‚úÖ' : '‚ùå'}`);
      console.log(`   üìè Gap: ${styles.gap} ${hasGap ? '‚úÖ' : '‚ùå'}`);

      return isFlexColumn && hasGap;
    } else {
      console.log('   ‚ùå Componente no encontrado para test responsive');
      return false;
    }
  } catch (error) {
    console.log('   ‚ùå Error verificando responsive:', error);
    return false;
  }
};

// Ejecutar todos los tests
const runAllTests = () => {
  console.log('üöÄ EJECUTANDO BATER√çA COMPLETA DE TESTS...');
  console.log('');

  const tests = [
    { name: 'Routing', fn: testRouting },
    { name: 'Componente DOM', fn: testComponent },
    { name: 'B√∫squeda', fn: testSearch },
    { name: 'Botones Acci√≥n', fn: testActions },
    { name: 'M√©tricas Header', fn: testMetrics },
    { name: 'Responsive Design', fn: testResponsive },
  ];

  let passed = 0;
  const results = [];

  tests.forEach((test) => {
    const result = test.fn();
    results.push({ name: test.name, passed: result });
    if (result) passed++;
    console.log('');
  });

  // Resumen
  console.log('üìã RESUMEN DE RESULTADOS');
  console.log('========================');

  results.forEach((result) => {
    const icon = result.passed ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${result.name}`);
  });

  console.log('');
  console.log(`üéØ TOTAL: ${passed}/${tests.length} tests pasaron`);

  if (passed === tests.length) {
    console.log('üéâ ¬°TODOS LOS TESTS PASARON! La Fase 1 est√° funcionando correctamente.');
  } else {
    console.log('‚ö†Ô∏è Algunos tests fallaron. Revisar implementaci√≥n.');
  }

  console.log('');
  console.log('üìù PR√ìXIMOS PASOS:');
  console.log('1. Si todos los tests pasaron, proceder con testing manual');
  console.log('2. Probar importaci√≥n de archivos CSV');
  console.log('3. Verificar modales de comunicaci√≥n masiva');
  console.log('4. Testear filtros y b√∫squeda avanzada');
  console.log('5. Validar responsive en diferentes dispositivos');

  return { passed, total: tests.length, success: passed === tests.length };
};

// Test espec√≠fico para funcionalidad de importaci√≥n
const testImportFunction = () => {
  console.log('üìÅ Test Extra: Verificando funcionalidad de importaci√≥n...');

  try {
    // Simular click en bot√≥n de importar
    const importBtn = Array.from(document.querySelectorAll('button')).find((btn) =>
      btn.textContent?.includes('Importar'),
    );

    if (importBtn) {
      console.log('   ‚úÖ Bot√≥n de importar encontrado');

      // Simular click
      importBtn.click();

      setTimeout(() => {
        const menu = document.querySelector('.import-export-section .absolute');
        if (menu && menu.style.display !== 'none') {
          console.log('   ‚úÖ Men√∫ de importaci√≥n se abri√≥ correctamente');
        } else {
          console.log('   ‚ö†Ô∏è Men√∫ de importaci√≥n no visible (puede ser por z-index)');
        }
      }, 100);

      return true;
    } else {
      console.log('   ‚ùå Bot√≥n de importar no encontrado');
      return false;
    }
  } catch (error) {
    console.log('   ‚ùå Error testando importaci√≥n:', error);
    return false;
  }
};

// Hacer funciones disponibles globalmente
window.runPhase1Tests = runAllTests;
window.testImportFunction = testImportFunction;
window.testRouting = testRouting;
window.testComponent = testComponent;

// Mensaje de instrucciones
console.log('üí° FUNCIONES DISPONIBLES:');
console.log('- runPhase1Tests() : Ejecutar todos los tests');
console.log('- testImportFunction() : Test espec√≠fico de importaci√≥n');
console.log('- testRouting() : Test solo de routing');
console.log('- testComponent() : Test solo de componente DOM');
console.log('');
console.log('üéØ Para empezar, ejecuta: runPhase1Tests()');
console.log('');
