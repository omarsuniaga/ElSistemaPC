<!-- src/modulos/Admin/components/AdvancedStudentsManagement.vue -->
<template>
  <div class="advanced-students-management">
    <!-- Header con métricas rápidas -->
    <div class="management-header">
      <div class="header-content">
        <div class="title-section">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
            Gestión Integral de Estudiantes
          </h2>
          <p class="text-gray-600 dark:text-gray-400 mt-1">
            Panel avanzado para administración completa de estudiantes
          </p>
        </div>
        
        <!-- Métricas rápidas -->
        <div class="quick-metrics">
          <div class="metric-card">
            <div class="metric-value">{{ studentStats.total }}</div>
            <div class="metric-label">Total</div>
          </div>
          <div class="metric-card">
            <div class="metric-value">{{ studentStats.active }}</div>
            <div class="metric-label">Activos</div>
          </div>
          <div class="metric-card">
            <div class="metric-value">{{ retentionRate }}%</div>
            <div class="metric-label">Retención</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Toolbar principal -->
    <div class="management-toolbar">
      <div class="toolbar-left">
        <!-- Búsqueda -->
        <div class="search-section">
          <div class="relative">
            <MagnifyingGlassIcon class="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <input
              v-model="searchQuery"
              type="text"
              placeholder="Buscar estudiantes..."
              class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-800 dark:border-gray-600 dark:text-white"
            />
          </div>
          
          <!-- Botón de filtros -->
          <button
            @click="toggleFilters"
            class="flex items-center px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 dark:border-gray-600 dark:hover:bg-gray-700"
          >
            <FunnelIcon class="h-4 w-4 mr-2" />
            Filtros
            <ChevronDownIcon 
              class="h-4 w-4 ml-2 transition-transform"
              :class="{ 'rotate-180': showFilters }"
            />
          </button>
        </div>
      </div>

      <div class="toolbar-right">
        <!-- Acciones masivas -->
        <div class="bulk-actions" v-if="selectedStudents.length > 0">
          <span class="text-sm text-gray-600 dark:text-gray-400 mr-4">
            {{ selectedStudents.length }} seleccionados
          </span>
          
          <div class="flex space-x-2">
            <button
              @click="openBulkEmailModal"
              class="btn-secondary"
            >
              <EnvelopeIcon class="h-4 w-4 mr-2" />
              Email Masivo
            </button>
            
            <button
              @click="openBulkWhatsAppModal"
              class="btn-secondary"
            >
              <ChatBubbleLeftIcon class="h-4 w-4 mr-2" />
              WhatsApp
            </button>
            
            <button
              @click="openBulkActionsMenu"
              class="btn-secondary"
            >
              <EllipsisVerticalIcon class="h-4 w-4" />
            </button>
          </div>
        </div>

        <!-- Importar/Exportar -->
        <div class="import-export-section">
          <div class="relative">
            <button
              @click="toggleImportMenu"
              class="btn-outline"
            >
              <ArrowUpTrayIcon class="h-4 w-4 mr-2" />
              Importar
            </button>
            
            <!-- Menú de importación -->
            <div 
              v-if="showImportMenu"
              class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50"
            >
              <div class="py-1">
                <button
                  @click="importFromCSV"
                  class="w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700"
                >
                  Desde archivo CSV
                </button>
                <button
                  @click="importFromExcel"
                  class="w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700"
                >
                  Desde archivo Excel
                </button>
              </div>
            </div>
          </div>
          
          <button
            @click="exportStudents"
            class="btn-outline"
          >
            <ArrowDownTrayIcon class="h-4 w-4 mr-2" />
            Exportar
          </button>
        </div>

        <!-- Crear estudiante -->
        <button
          @click="openCreateStudentModal"
          class="btn-primary"
        >
          <PlusIcon class="h-4 w-4 mr-2" />
          Nuevo Estudiante
        </button>
      </div>
    </div>

    <!-- Panel de filtros (colapsible) -->
    <div v-if="showFilters" class="filters-panel">
      <div class="filters-grid">
        <div class="filter-group">
          <label class="filter-label">Estado</label>
          <select v-model="filters.status" class="filter-select">
            <option value="">Todos</option>
            <option value="active">Activo</option>
            <option value="inactive">Inactivo</option>
            <option value="pending">Pendiente</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Instrumento</label>
          <select v-model="filters.instrument" class="filter-select">
            <option value="">Todos</option>
            <option value="piano">Piano</option>
            <option value="guitarra">Guitarra</option>
            <option value="violin">Violín</option>
            <option value="flauta">Flauta</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Nivel</label>
          <select v-model="filters.grade" class="filter-select">
            <option value="">Todos</option>
            <option value="beginner">Principiante</option>
            <option value="intermediate">Intermedio</option>
            <option value="advanced">Avanzado</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Clase</label>
          <select v-model="filters.class" class="filter-select">
            <option value="">Todas</option>
            <option v-for="cls in availableClasses" :key="cls.id" :value="cls.id">
              {{ cls.name }}
            </option>
          </select>
        </div>
      </div>
      
      <div class="filters-actions">
        <button @click="clearFilters" class="btn-secondary">
          Limpiar Filtros
        </button>
        <button @click="applyFilters" class="btn-primary">
          Aplicar Filtros
        </button>
      </div>
    </div>

    <!-- Tabla de estudiantes -->
    <div class="students-table-container">
      <div class="table-wrapper">
        <table class="students-table">
          <thead>
            <tr>
              <th class="w-12">
                <input
                  type="checkbox"
                  :checked="isAllSelected"
                  @change="toggleSelectAll"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
              </th>
              <th>Estudiante</th>
              <th>Instrumento</th>
              <th>Nivel</th>
              <th>Clases</th>
              <th>Estado</th>
              <th>Asistencia</th>
              <th>Riesgo</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            <tr
              v-for="student in paginatedStudents"
              :key="student.id"
              class="table-row"
              :class="{ 'selected': selectedStudents.includes(student.id) }"
            >
              <td>
                <input
                  type="checkbox"
                  :checked="selectedStudents.includes(student.id)"
                  @change="toggleStudentSelection(student.id)"
                  class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
              </td>
              
              <td>
                <div class="student-cell">
                  <div class="student-avatar">
                    <img 
                      v-if="student.avatar" 
                      :src="student.avatar" 
                      :alt="student.name"
                      class="w-10 h-10 rounded-full object-cover"
                    />
                    <div 
                      v-else 
                      class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-medium"
                    >
                      {{ getInitials(student.name) }}
                    </div>
                  </div>
                  <div class="student-info">
                    <div class="student-name">{{ student.name }}</div>
                    <div class="student-email">{{ student.email }}</div>
                  </div>
                </div>
              </td>
              
              <td>
                <span class="badge badge-secondary">
                  {{ student.instruments.join(', ') }}
                </span>
              </td>
              
              <td>
                <span class="badge" :class="getGradeBadgeClass(student.grade)">
                  {{ getGradeLabel(student.grade) }}
                </span>
              </td>
              
              <td>
                <span class="text-sm text-gray-600 dark:text-gray-400">
                  {{ student.classes.length }} clases
                </span>
              </td>
              
              <td>
                <span class="badge" :class="getStatusBadgeClass(student.status)">
                  {{ getStatusLabel(student.status) }}
                </span>
              </td>
              
              <td>
                <div class="attendance-cell">
                  <div class="attendance-percentage">{{ getAttendancePercentage(student.id) }}%</div>
                  <div class="attendance-bar">
                    <div 
                      class="attendance-fill"
                      :style="{ width: getAttendancePercentage(student.id) + '%' }"
                    ></div>
                  </div>
                </div>
              </td>
              
              <td>
                <span class="badge" :class="getChurnRiskBadgeClass(student.id)">
                  {{ getChurnRiskLabel(student.id) }}
                </span>
              </td>
              
              <td>
                <div class="actions-cell">
                  <button
                    @click="viewStudentDetails(student.id)"
                    class="action-btn"
                    title="Ver detalles"
                  >
                    <EyeIcon class="h-4 w-4" />
                  </button>
                  
                  <button
                    @click="editStudent(student.id)"
                    class="action-btn"
                    title="Editar"
                  >
                    <PencilIcon class="h-4 w-4" />
                  </button>
                  
                  <div class="relative">
                    <button
                      @click="toggleStudentMenu(student.id)"
                      class="action-btn"
                      title="Más opciones"
                    >
                      <EllipsisVerticalIcon class="h-4 w-4" />
                    </button>
                    
                    <!-- Menú contextual del estudiante -->
                    <div 
                      v-if="activeStudentMenu === student.id"
                      class="student-menu"
                    >
                      <button @click="generateProgressReport(student.id)">
                        Reporte de Progreso
                      </button>
                      <button @click="generateCertificate(student.id)">
                        Certificado de Asistencia
                      </button>
                      <button @click="viewDocuments(student.id)">
                        Ver Documentos
                      </button>
                      <button @click="predictChurn(student.id)">
                        Análisis de Riesgo
                      </button>
                      <hr class="my-1">
                      <button @click="sendEmailToStudent(student.id)" class="text-blue-600">
                        Enviar Email
                      </button>
                      <button @click="sendWhatsAppToParent(student.id)" class="text-green-600">
                        WhatsApp a Padre
                      </button>
                      <hr class="my-1">
                      <button @click="deactivateStudent(student.id)" class="text-red-600">
                        Desactivar
                      </button>
                    </div>
                  </div>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <!-- Paginación -->
      <div class="pagination">
        <div class="pagination-info">
          Mostrando {{ ((currentPage - 1) * pageSize) + 1 }} a {{ Math.min(currentPage * pageSize, filteredStudents.length) }} 
          de {{ filteredStudents.length }} estudiantes
        </div>
        
        <div class="pagination-controls">
          <button
            @click="currentPage--"
            :disabled="currentPage === 1"
            class="pagination-btn"
          >
            Anterior
          </button>
          
          <span class="pagination-pages">
            Página {{ currentPage }} de {{ totalPages }}
          </span>
          
          <button
            @click="currentPage++"
            :disabled="currentPage === totalPages"
            class="pagination-btn"
          >
            Siguiente
          </button>
        </div>
      </div>
    </div>

    <!-- Loading overlay -->
    <div v-if="isLoading" class="loading-overlay">
      <div class="loading-spinner"></div>
      <div class="loading-text">Procesando...</div>
    </div>

    <!-- Modales -->    <BulkEmailModal
      :is-open="showBulkEmailModal"
      :selected-students="getSelectedStudentsData()"
      @close="showBulkEmailModal = false"
      @sent="onBulkEmailSent"
    />
    
    <BulkWhatsAppModal
      :is-open="showBulkWhatsAppModal"
      :selected-students="getSelectedStudentsData()"
      @close="showBulkWhatsAppModal = false"
      @sent="onBulkWhatsAppSent"
    />
    
    <ImportResultModal
      :is-open="showImportResult"
      :result="importResult"
      @close="showImportResult = false"
      @viewStudents="onViewImportedStudents"
    />
    
    <StudentProgressModal
      v-if="showProgressReport"
      :student-id="selectedStudentForReport"
      @close="showProgressReport = false"
    />
    
    <ChurnPredictionModal
      v-if="showChurnPrediction"
      :student-id="selectedStudentForChurn"
      :prediction="churnPrediction"
      @close="showChurnPrediction = false"
    />
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, nextTick } from 'vue'
import { useAdminStudentsStore } from '../store/adminStudents'
import type { ImportResult, ProgressReport, ChurnPrediction } from '../services/advancedStudents'

// Icons
import {
  MagnifyingGlassIcon,
  FunnelIcon,
  ChevronDownIcon,
  EnvelopeIcon,
  ChatBubbleLeftIcon,
  EllipsisVerticalIcon,
  ArrowUpTrayIcon,
  ArrowDownTrayIcon,
  PlusIcon,
  EyeIcon,
  PencilIcon
} from '@heroicons/vue/24/outline'

// Components
import BulkEmailModal from './modals/BulkEmailModal.vue'
import BulkWhatsAppModal from './modals/BulkWhatsAppModal.vue'
import ImportResultModal from './modals/ImportResultModal.vue'
import StudentProgressModal from './modals/StudentProgressModal.vue'
import ChurnPredictionModal from './modals/ChurnPredictionModal.vue'

// Store
const studentsStore = useAdminStudentsStore()

// State
const searchQuery = ref('')
const showFilters = ref(false)
const showImportMenu = ref(false)
const selectedStudents = ref<string[]>([])
const currentPage = ref(1)
const pageSize = ref(20)
const activeStudentMenu = ref<string | null>(null)
const retentionRate = ref(0)

// Modal states
const showBulkEmailModal = ref(false)
const showBulkWhatsAppModal = ref(false)
const showImportResult = ref(false)
const showProgressReport = ref(false)
const showChurnPrediction = ref(false)
const selectedStudentForReport = ref<string | null>(null)
const selectedStudentForChurn = ref<string | null>(null)

// Data
const importResult = ref<ImportResult>({
  success: false,
  imported: 0,
  failed: 0,
  errors: [],
  duplicates: 0
})
const churnPrediction = ref<ChurnPrediction | null>(null)
const availableClasses = ref([
  { id: '1', name: 'Piano Principiantes' },
  { id: '2', name: 'Guitarra Intermedio' },
  { id: '3', name: 'Violín Avanzado' }
])

// Computed
const { students, isLoading, error, filters, studentStats, filteredStudents } = studentsStore

const paginatedStudents = computed(() => {
  const start = (currentPage.value - 1) * pageSize.value
  const end = start + pageSize.value
  return filteredStudents.slice(start, end)
})

const totalPages = computed(() => Math.ceil(filteredStudents.length / pageSize.value))

const isAllSelected = computed(() => {
  return paginatedStudents.value.length > 0 && 
         paginatedStudents.value.every(student => selectedStudents.value.includes(student.id))
})

// Methods
const toggleFilters = () => {
  showFilters.value = !showFilters.value
}

const toggleImportMenu = () => {
  showImportMenu.value = !showImportMenu.value
}

const toggleSelectAll = () => {
  if (isAllSelected.value) {
    selectedStudents.value = selectedStudents.value.filter(id => 
      !paginatedStudents.value.some(student => student.id === id)
    )
  } else {
    const pageStudentIds = paginatedStudents.value.map(student => student.id)
    selectedStudents.value = [...new Set([...selectedStudents.value, ...pageStudentIds])]
  }
}

const toggleStudentSelection = (studentId: string) => {
  const index = selectedStudents.value.indexOf(studentId)
  if (index > -1) {
    selectedStudents.value.splice(index, 1)
  } else {
    selectedStudents.value.push(studentId)
  }
}

const clearFilters = () => {
  studentsStore.clearFilters()
}

const applyFilters = () => {
  studentsStore.setFilters(filters)
  currentPage.value = 1
}

const toggleStudentMenu = (studentId: string) => {
  activeStudentMenu.value = activeStudentMenu.value === studentId ? null : studentId
}

// File operations
const importFromCSV = () => {
  const input = document.createElement('input')
  input.type = 'file'
  input.accept = '.csv'
  input.onchange = async (e) => {
    const file = (e.target as HTMLInputElement).files?.[0]
    if (file) {
      try {
        const result = await studentsStore.importStudentsFromCSV(file)
        importResult.value = result
        showImportResult.value = true
      } catch (error) {
        console.error('Error importing CSV:', error)
      }
    }
  }
  input.click()
  showImportMenu.value = false
}

const importFromExcel = () => {
  const input = document.createElement('input')
  input.type = 'file'
  input.accept = '.xlsx,.xls'
  input.onchange = async (e) => {
    const file = (e.target as HTMLInputElement).files?.[0]
    if (file) {
      try {
        const result = await studentsStore.importStudentsFromExcel(file)
        importResult.value = result
        showImportResult.value = true
      } catch (error) {
        console.error('Error importing Excel:', error)
      }
    }
  }
  input.click()
  showImportMenu.value = false
}

const exportStudents = async () => {
  try {
    await studentsStore.exportStudents()
  } catch (error) {
    console.error('Error exporting students:', error)
  }
}

// Modal handlers
const openBulkEmailModal = () => {
  showBulkEmailModal.value = true
}

const openBulkWhatsAppModal = () => {
  showBulkWhatsAppModal.value = true
}

const onBulkEmailSent = () => {
  selectedStudents.value = []
  showBulkEmailModal.value = false
}

const onBulkWhatsAppSent = () => {
  selectedStudents.value = []
  showBulkWhatsAppModal.value = false
}

const onViewImportedStudents = (studentIds: string[]) => {
  // Filtrar para mostrar solo los estudiantes importados
  console.log('Ver estudiantes importados:', studentIds)
}

const getSelectedStudentsData = () => {
  return students.filter(student => 
    selectedStudents.value.includes(student.id)
  ).map(student => ({
    id: student.id,
    firstName: student.name.split(' ')[0],
    lastName: student.name.split(' ').slice(1).join(' '),
    email: student.email,
    phone: student.phone
  }))
}

// Funciones faltantes
const openBulkActionsMenu = () => {
  console.log('Abrir menú de acciones masivas')
}

const openCreateStudentModal = () => {
  console.log('Abrir modal de crear estudiante')
}

const viewDocuments = (studentId: string) => {
  console.log('Ver documentos del estudiante:', studentId)
}

const sendEmailToStudent = (studentId: string) => {
  console.log('Enviar email al estudiante:', studentId)
}

const sendWhatsAppToParent = (studentId: string) => {
  console.log('Enviar WhatsApp al padre:', studentId)
}

const deactivateStudent = (studentId: string) => {
  console.log('Desactivar estudiante:', studentId)
}

// Student actions
const viewStudentDetails = (studentId: string) => {
  // Implementar vista de detalles
  console.log('Ver detalles de estudiante:', studentId)
}

const editStudent = (studentId: string) => {
  // Implementar edición
  console.log('Editar estudiante:', studentId)
}

const generateProgressReport = async (studentId: string) => {
  selectedStudentForReport.value = studentId
  showProgressReport.value = true
}

const generateCertificate = async (studentId: string) => {
  try {
    const certificateBlob = await studentsStore.generateAttendanceCertificate(studentId)
    // Descargar certificado
    const url = URL.createObjectURL(certificateBlob)
    const a = document.createElement('a')
    a.href = url
    a.download = `certificado-${studentId}.pdf`
    a.click()
    URL.revokeObjectURL(url)
  } catch (error) {
    console.error('Error generando certificado:', error)
  }
}

const predictChurn = async (studentId: string) => {
  try {
    const prediction = await studentsStore.predictStudentChurn(studentId)
    churnPrediction.value = prediction
    selectedStudentForChurn.value = studentId
    showChurnPrediction.value = true
  } catch (error) {
    console.error('Error predicting churn:', error)
  }
}

// Utility functions
const getInitials = (name: string) => {
  return name.split(' ').map(n => n[0]).join('').toUpperCase()
}

const getGradeBadgeClass = (grade: string) => {
  const classes = {
    beginner: 'badge-green',
    intermediate: 'badge-yellow',
    advanced: 'badge-red'
  }
  return classes[grade as keyof typeof classes] || 'badge-gray'
}

const getGradeLabel = (grade: string) => {
  const labels = {
    beginner: 'Principiante',
    intermediate: 'Intermedio',
    advanced: 'Avanzado'
  }
  return labels[grade as keyof typeof labels] || grade
}

const getStatusBadgeClass = (status: string) => {
  const classes = {
    active: 'badge-green',
    inactive: 'badge-red',
    pending: 'badge-yellow'
  }
  return classes[status as keyof typeof classes] || 'badge-gray'
}

const getStatusLabel = (status: string) => {
  const labels = {
    active: 'Activo',
    inactive: 'Inactivo',
    pending: 'Pendiente'
  }
  return labels[status as keyof typeof labels] || status
}

const getAttendancePercentage = (studentId: string) => {
  // Simular porcentaje de asistencia
  return Math.floor(Math.random() * 40) + 60 // 60-100%
}

const getChurnRiskBadgeClass = (studentId: string) => {
  const risk = getChurnRiskLevel(studentId)
  const classes = {
    low: 'badge-green',
    medium: 'badge-yellow',
    high: 'badge-red'
  }
  return classes[risk]
}

const getChurnRiskLabel = (studentId: string) => {
  const risk = getChurnRiskLevel(studentId)
  const labels = {
    low: 'Bajo',
    medium: 'Medio',
    high: 'Alto'
  }
  return labels[risk]
}

const getChurnRiskLevel = (studentId: string) => {
  // Simular nivel de riesgo
  const risks = ['low', 'medium', 'high']
  return risks[Math.floor(Math.random() * risks.length)] as 'low' | 'medium' | 'high'
}

// Lifecycle
onMounted(async () => {
  await studentsStore.loadStudents()
  
  // Calcular tasa de retención
  try {
    const now = new Date()
    const sixMonthsAgo = new Date(now.getTime() - (6 * 30 * 24 * 60 * 60 * 1000))
    retentionRate.value = await studentsStore.getStudentRetentionRate({
      start: sixMonthsAgo,
      end: now
    })
  } catch (error) {
    console.error('Error calculando tasa de retención:', error)
  }
})

// Click outside to close menus
const handleClickOutside = (event: Event) => {
  const target = event.target as HTMLElement
  if (!target.closest('.student-menu')) {
    activeStudentMenu.value = null
  }
  if (!target.closest('.import-export-section')) {
    showImportMenu.value = false
  }
}

onMounted(() => {
  document.addEventListener('click', handleClickOutside)
})
</script>

<style scoped>
.management-header {
  @apply bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6;
}

.header-content {
  @apply flex items-center justify-between;
}

.quick-metrics {
  @apply flex space-x-6;
}

.metric-card {
  @apply text-center;
}

.metric-value {
  @apply text-2xl font-bold text-gray-900 dark:text-white;
}

.metric-label {
  @apply text-sm text-gray-600 dark:text-gray-400;
}

.management-toolbar {
  @apply bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4 flex items-center justify-between;
}

.search-section {
  @apply flex items-center space-x-4;
}

.toolbar-right {
  @apply flex items-center space-x-4;
}

.bulk-actions {
  @apply flex items-center;
}

.import-export-section {
  @apply flex items-center space-x-2;
}

.filters-panel {
  @apply bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4;
}

.filters-grid {
  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4;
}

.filter-group {
  @apply space-y-2;
}

.filter-label {
  @apply block text-sm font-medium text-gray-700 dark:text-gray-300;
}

.filter-select {
  @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white;
}

.filters-actions {
  @apply flex justify-end space-x-2;
}

.students-table-container {
  @apply bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700;
}

.table-wrapper {
  @apply overflow-x-auto;
}

.students-table {
  @apply w-full;
}

.students-table th {
  @apply px-6 py-3 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider;
}

.students-table td {
  @apply px-6 py-4 border-b border-gray-200 dark:border-gray-700;
}

.table-row {
  @apply hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors;
}

.table-row.selected {
  @apply bg-blue-50 dark:bg-blue-900/20;
}

.student-cell {
  @apply flex items-center space-x-3;
}

.student-info {
  @apply min-w-0 flex-1;
}

.student-name {
  @apply text-sm font-medium text-gray-900 dark:text-white;
}

.student-email {
  @apply text-xs text-gray-500 dark:text-gray-400;
}

.attendance-cell {
  @apply space-y-1;
}

.attendance-percentage {
  @apply text-sm font-medium text-gray-900 dark:text-white;
}

.attendance-bar {
  @apply w-16 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden;
}

.attendance-fill {
  @apply h-full bg-green-500 transition-all duration-300;
}

.actions-cell {
  @apply flex items-center space-x-2;
}

.action-btn {
  @apply p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors;
}

.student-menu {
  @apply absolute right-0 mt-2 w-56 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 py-1 z-50;
}

.student-menu button {
  @apply w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors;
}

.pagination {
  @apply flex items-center justify-between px-6 py-3 border-t border-gray-200 dark:border-gray-700;
}

.pagination-info {
  @apply text-sm text-gray-700 dark:text-gray-300;
}

.pagination-controls {
  @apply flex items-center space-x-4;
}

.pagination-btn {
  @apply px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed;
}

.pagination-pages {
  @apply text-sm text-gray-700 dark:text-gray-300;
}

.loading-overlay {
  @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
}

.loading-spinner {
  @apply w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin;
}

.loading-text {
  @apply text-white ml-4;
}

/* Badges */
.badge {
  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
}

.badge-secondary {
  @apply bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300;
}

.badge-green {
  @apply bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-300;
}

.badge-yellow {
  @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-300;
}

.badge-red {
  @apply bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-300;
}

.badge-gray {
  @apply bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300;
}

/* Buttons */
.btn-primary {
  background-color: rgb(37 99 235);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  font-weight: 500;
  transition: background-color 0.2s;
  display: flex;
  align-items: center;
}

.btn-primary:hover {
  background-color: rgb(29 78 216);
}

.btn-secondary {
  background-color: rgb(243 244 246);
  color: rgb(55 65 81);
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  font-weight: 500;
  transition: background-color 0.2s;
  display: flex;
  align-items: center;
}

.btn-secondary:hover {
  background-color: rgb(229 231 235);
}

.dark .btn-secondary {
  background-color: rgb(55 65 81);
  color: rgb(209 213 219);
}

.dark .btn-secondary:hover {
  background-color: rgb(75 85 99);
}

.btn-outline {
  border: 1px solid rgb(209 213 219);
  background-color: transparent;
  color: rgb(55 65 81);
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  font-weight: 500;
  transition: background-color 0.2s;
  display: flex;
  align-items: center;
}

.btn-outline:hover {
  background-color: rgb(249 250 251);
}

.dark .btn-outline {
  border-color: rgb(75 85 99);
  color: rgb(209 213 219);
}

.dark .btn-outline:hover {
  background-color: rgb(55 65 81);
}
</style>
