import {ref, computed} from "vue"
import {
  collection,
  doc,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
  query,
  where,
  orderBy,
} from "firebase/firestore"
import {db} from "../firebase/config"
import {useAuthStore} from "../stores/auth"

export interface WhatsAppPreset {
  id: string
  name: string
  category: "disciplinary" | "administrative" | "reminder" | "custom"
  template: string
  variables: string[]
  isActive: boolean
  createdBy: string
  isSystem: boolean
  order: number
  createdAt: Date
  updatedAt: Date
}

export interface MessageData {
  studentName: string
  representanteName: string
  representantePhone: string
  className: string
  date: string
  absences: number
  teacherName: string
  institutionName: string
  // Nuevas variables para fechas de rango
  startDate?: string
  endDate?: string
  absenceDetails?: string
  attendanceRate?: number
}

const COLLECTION_NAME = "WHATSAPP_PRESETS"

export function useWhatsAppPresets() {
  const authStore = useAuthStore()
  const presets = ref<WhatsAppPreset[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)

  // Presets del sistema por defecto
  const defaultPresets: Omit<WhatsAppPreset, "id" | "createdAt" | "updatedAt">[] = [
    {
      name: "Llamado de Atenci√≥n",
      category: "disciplinary",
      template: `üîî *LLAMADO DE ATENCI√ìN*

Estimado/a {representanteName},

Le informamos que el estudiante *{studentName}* de la clase de *{className}* ha acumulado *{absences} ausencias* durante el presente per√≠odo.

üìÖ Fecha: {date}
üë®‚Äçüè´ Maestro: {teacherName}
üè´ Instituci√≥n: {institutionName}

Es importante mantener la asistencia regular para el progreso acad√©mico del estudiante.

Esperamos su comprensi√≥n y colaboraci√≥n.

*Academia Musical*`,
      variables: [
        "studentName",
        "representanteName",
        "className",
        "date",
        "absences",
        "teacherName",
        "institutionName",
      ],
      isActive: true,
      createdBy: "system",
      isSystem: true,
      order: 1,
    },
    {
      name: "Amonestaci√≥n Formal",
      category: "disciplinary",
      template: `‚ö†Ô∏è *AMONESTACI√ìN FORMAL*

Estimado/a {representanteName},

Por medio de la presente, le notificamos que el estudiante *{studentName}* ha recibido una AMONESTACI√ìN FORMAL por las siguientes razones:

üìä Ausencias acumuladas: *{absences}*
üìÖ Fecha: {date}
üéµ Clase: {className}
üë®‚Äçüè´ Maestro: {teacherName}

Esta amonestaci√≥n queda registrada en el expediente del estudiante. De continuar con esta conducta, se proceder√° con medidas disciplinarias m√°s severas.

Solicitamos su inmediata atenci√≥n a este asunto.

*{institutionName}*
*Departamento Acad√©mico*`,
      variables: [
        "studentName",
        "representanteName",
        "className",
        "date",
        "absences",
        "teacherName",
        "institutionName",
      ],
      isActive: true,
      createdBy: "system",
      isSystem: true,
      order: 2,
    },
    {
      name: "Recordatorio de Instrumento",
      category: "reminder",
      template: `üéµ *RECORDATORIO - INSTRUMENTO MUSICAL*

Estimado/a {representanteName},

Le recordamos que el estudiante *{studentName}* debe traer su instrumento musical para la clase de *{className}*.

üìÖ Pr√≥xima clase: {date}
üë®‚Äçüè´ Maestro: {teacherName}
üéº Es fundamental para el desarrollo de las actividades

La pr√°ctica con el instrumento propio es esencial para el progreso del estudiante.

Gracias por su atenci√≥n.

*{institutionName}*`,
      variables: [
        "studentName",
        "representanteName",
        "className",
        "date",
        "teacherName",
        "institutionName",
      ],
      isActive: true,
      createdBy: "system",
      isSystem: true,
      order: 3,
    },
    {
      name: "Suspensi√≥n Temporal",
      category: "disciplinary",
      template: `üî¥ *SUSPENSI√ìN TEMPORAL*

Estimado/a {representanteName},

Lamentamos informarle que el estudiante *{studentName}* ha sido SUSPENDIDO TEMPORALMENTE de las clases de *{className}* por el siguiente per√≠odo:

üìÖ Fecha de suspensi√≥n: {date}
‚è∞ Duraci√≥n: 1 semana
üìä Motivo: Ausencias excesivas ({absences} faltas)
üë®‚Äçüè´ Maestro: {teacherName}

Para la reincorporaci√≥n, deber√°:
‚úÖ Reuni√≥n con coordinaci√≥n acad√©mica
‚úÖ Compromiso de asistencia regular
‚úÖ Ponerse al d√≠a con el contenido perdido

*{institutionName}*
*Coordinaci√≥n Acad√©mica*`,
      variables: [
        "studentName",
        "representanteName",
        "className",
        "date",
        "absences",
        "teacherName",
        "institutionName",
      ],
      isActive: true,
      createdBy: "system",
      isSystem: true,
      order: 4,
    },
    {
      name: "Informe de Ausencias por Per√≠odo",
      category: "administrative",
      template: `üìä *INFORME DE AUSENCIAS - PER√çODO*

Estimado/a {representanteName},

Le informamos sobre las ausencias del estudiante *{studentName}* durante el per√≠odo comprendido entre *{startDate}* y *{endDate}*:

üéµ Clase: *{className}*
üìä Total de ausencias: *{absences}*
üìà Porcentaje de asistencia: *{attendanceRate}%*
üë®‚Äçüè´ Maestro: {teacherName}

{absenceDetails}

Es importante mantener una asistencia regular para asegurar el progreso acad√©mico del estudiante.

Agradecemos su atenci√≥n.

*{institutionName}*`,
      variables: [
        "studentName",
        "representanteName",
        "className",
        "startDate",
        "endDate",
        "absences",
        "attendanceRate",
        "absenceDetails",
        "teacherName",
        "institutionName",
      ],
      isActive: true,
      createdBy: "system",
      isSystem: true,
      order: 6,
    },
    {
      name: "Suspensi√≥n Permanente",
      category: "disciplinary",
      template: `‚ö´ *SUSPENSI√ìN PERMANENTE*

Estimado/a {representanteName},

Despu√©s de m√∫ltiples advertencias y amonestaciones, lamentamos informarle que el estudiante *{studentName}* ha sido SUSPENDIDO PERMANENTEMENTE de la instituci√≥n.

üìÖ Fecha efectiva: {date}
üìä Ausencias acumuladas: {absences}
üéµ Clase: {className}
üë®‚Äçüè´ Maestro: {teacherName}

Esta decisi√≥n se toma despu√©s de agotar todas las instancias de di√°logo y compromiso.

Los documentos del estudiante estar√°n disponibles para retiro en coordinaci√≥n.

*{institutionName}*
*Direcci√≥n Acad√©mica*`,
      variables: [
        "studentName",
        "representanteName",
        "className",
        "date",
        "absences",
        "teacherName",
        "institutionName",
      ],
      isActive: true,
      createdBy: "system",
      isSystem: true,
      order: 7,
    },
  ]

  // Cargar presets desde Firestore
  const loadPresets = async () => {
    loading.value = true
    error.value = null

    try {
      const q = query(
        collection(db, COLLECTION_NAME),
        where("isActive", "==", true),
        orderBy("order", "asc")
      )

      const querySnapshot = await getDocs(q)
      const loadedPresets: WhatsAppPreset[] = []

      querySnapshot.forEach((doc) => {
        loadedPresets.push({
          id: doc.id,
          ...doc.data(),
          createdAt: doc.data().createdAt?.toDate() || new Date(),
          updatedAt: doc.data().updatedAt?.toDate() || new Date(),
        } as WhatsAppPreset)
      })

      // Si no hay presets, crear los por defecto
      if (loadedPresets.length === 0) {
        await initializeDefaultPresets()
        await loadPresets() // Recargar despu√©s de crear los defaults
        return
      }

      presets.value = loadedPresets
    } catch (err) {
      console.error("Error loading WhatsApp presets:", err)
      error.value = "Error al cargar los presets de WhatsApp"
    } finally {
      loading.value = false
    }
  }

  // Inicializar presets por defecto
  const initializeDefaultPresets = async () => {
    if (!authStore.user?.uid) return

    try {
      for (const preset of defaultPresets) {
        await addDoc(collection(db, COLLECTION_NAME), {
          ...preset,
          createdAt: new Date(),
          updatedAt: new Date(),
        })
      }
    } catch (err) {
      console.error("Error initializing default presets:", err)
    }
  }
  // Procesar template con datos
  const processTemplate = (template: string, data: MessageData): string => {
    let processedTemplate = template

    // Reemplazar variables b√°sicas
    processedTemplate = processedTemplate.replace(/{studentName}/g, data.studentName)
    processedTemplate = processedTemplate.replace(/{representanteName}/g, data.representanteName)
    processedTemplate = processedTemplate.replace(/{className}/g, data.className)
    processedTemplate = processedTemplate.replace(/{date}/g, data.date)
    processedTemplate = processedTemplate.replace(/{absences}/g, data.absences.toString())
    processedTemplate = processedTemplate.replace(/{teacherName}/g, data.teacherName)
    processedTemplate = processedTemplate.replace(/{institutionName}/g, data.institutionName)

    // Reemplazar nuevas variables opcionales
    processedTemplate = processedTemplate.replace(/{startDate}/g, data.startDate || "")
    processedTemplate = processedTemplate.replace(/{endDate}/g, data.endDate || "")
    processedTemplate = processedTemplate.replace(/{absenceDetails}/g, data.absenceDetails || "")
    processedTemplate = processedTemplate.replace(
      /{attendanceRate}/g,
      data.attendanceRate?.toString() || "0"
    )

    return processedTemplate
  }

  // Copiar al portapapeles
  const copyToClipboard = async (text: string): Promise<boolean> => {
    try {
      await navigator.clipboard.writeText(text)
      return true
    } catch (err) {
      console.error("Error copying to clipboard:", err)
      return false
    }
  }

  // Agregar nuevo preset
  const addPreset = async (preset: Omit<WhatsAppPreset, "id" | "createdAt" | "updatedAt">) => {
    if (!authStore.user?.uid) throw new Error("Usuario no autenticado")

    try {
      await addDoc(collection(db, COLLECTION_NAME), {
        ...preset,
        createdBy: authStore.user.uid,
        createdAt: new Date(),
        updatedAt: new Date(),
      })

      await loadPresets() // Recargar presets
    } catch (err) {
      console.error("Error adding preset:", err)
      throw err
    }
  }

  // Actualizar preset
  const updatePreset = async (id: string, updates: Partial<WhatsAppPreset>) => {
    try {
      await updateDoc(doc(db, COLLECTION_NAME, id), {
        ...updates,
        updatedAt: new Date(),
      })

      await loadPresets() // Recargar presets
    } catch (err) {
      console.error("Error updating preset:", err)
      throw err
    }
  }

  // Eliminar preset
  const deletePreset = async (id: string) => {
    try {
      await deleteDoc(doc(db, COLLECTION_NAME, id))
      await loadPresets() // Recargar presets
    } catch (err) {
      console.error("Error deleting preset:", err)
      throw err
    }
  }

  // Presets agrupados por categor√≠a
  const presetsByCategory = computed(() => {
    const grouped: Record<string, WhatsAppPreset[]> = {
      disciplinary: [],
      administrative: [],
      reminder: [],
      custom: [],
    }

    presets.value.forEach((preset) => {
      if (grouped[preset.category]) {
        grouped[preset.category].push(preset)
      }
    })

    return grouped
  })

  return {
    presets,
    loading,
    error,
    presetsByCategory,
    loadPresets,
    processTemplate,
    copyToClipboard,
    addPreset,
    updatePreset,
    deletePreset,
  }
}
