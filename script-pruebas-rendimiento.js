// SCRIPT DE PRUEBAS DE RENDIMIENTO - Music Academy Manager
// Ejecutar paso a paso en la consola del navegador (F12)

console.log("üöÄ INICIANDO PRUEBAS DE RENDIMIENTO - Music Academy Manager")

// ===== PASO 1: VERIFICAR SISTEMAS DISPONIBLES =====
console.group("üìã PASO 1: Verificaci√≥n de Sistemas")

if (typeof window.performanceMonitor !== "undefined") {
  console.log("‚úÖ Performance Monitor: DISPONIBLE")
} else {
  console.log("‚ùå Performance Monitor: NO DISPONIBLE")
}

if (typeof window.smartCache !== "undefined") {
  console.log("‚úÖ Smart Cache: DISPONIBLE")
} else {
  console.log("‚ùå Smart Cache: NO DISPONIBLE")
}

if (typeof window.lazyLoader !== "undefined") {
  console.log("‚úÖ Lazy Loader: DISPONIBLE")
} else {
  console.log("‚ùå Lazy Loader: NO DISPONIBLE")
}

if (typeof window.imageOptimizer !== "undefined") {
  console.log("‚úÖ Image Optimizer: DISPONIBLE")
} else {
  console.log("‚ùå Image Optimizer: NO DISPONIBLE")
}

if (typeof window.quickPerformanceCheck === "function") {
  console.log("‚úÖ Funci√≥n de Chequeo R√°pido: DISPONIBLE")
} else {
  console.log("‚ùå Funci√≥n de Chequeo R√°pido: NO DISPONIBLE")
}

if (typeof window.runPerformanceTests === "function") {
  console.log("‚úÖ Suite de Pruebas: DISPONIBLE")
} else {
  console.log("‚ùå Suite de Pruebas: NO DISPONIBLE")
}

console.groupEnd()

// ===== PASO 2: CHEQUEO R√ÅPIDO =====
console.group("‚ö° PASO 2: Chequeo R√°pido de Rendimiento")

function ejecutarChequeoRapido() {
  try {
    console.log("üîç Ejecutando chequeo r√°pido...")

    if (typeof window.quickPerformanceCheck === "function") {
      window.quickPerformanceCheck()
    } else {
      console.warn("Funci√≥n de chequeo r√°pido no disponible, ejecutando manualmente...")

      // Obtener m√©tricas b√°sicas manualmente
      if (window.performanceMonitor) {
        const report = window.performanceMonitor.generateReport()
        console.log("üìä Reporte de rendimiento:", report)
      }

      if (window.smartCache) {
        const cacheStats = window.smartCache.getStats()
        console.log("üíæ Estad√≠sticas de cache:", cacheStats)
      }
    }

    console.log("‚úÖ Chequeo r√°pido completado")
  } catch (error) {
    console.error("‚ùå Error en chequeo r√°pido:", error)
  }
}

ejecutarChequeoRapido()
console.groupEnd()

// ===== PASO 3: PRUEBAS DE CACHE =====
console.group("üíæ PASO 3: Pruebas de Sistema de Cache")

function probarCache() {
  try {
    console.log("üß™ Probando sistema de cache...")

    if (!window.smartCache) {
      console.error("‚ùå Sistema de cache no disponible")
      return
    }

    const startTime = performance.now()

    // Test de escritura
    console.log("üìù Test de escritura...")
    for (let i = 0; i < 10; i++) {
      window.smartCache.set(
        `test-key-${i}`,
        {
          id: i,
          data: `Datos de prueba ${i}`,
          timestamp: new Date(),
        },
        {ttl: 60000}
      ) // 1 minuto TTL
    }
    const writeTime = performance.now() - startTime

    // Test de lectura
    console.log("üìñ Test de lectura...")
    const readStart = performance.now()
    let hits = 0
    for (let i = 0; i < 10; i++) {
      const result = window.smartCache.get(`test-key-${i}`)
      if (result) hits++
    }
    const readTime = performance.now() - readStart

    // Resultados
    console.log(`‚è±Ô∏è Tiempo de escritura: ${writeTime.toFixed(2)}ms`)
    console.log(`‚è±Ô∏è Tiempo de lectura: ${readTime.toFixed(2)}ms`)
    console.log(`üéØ Hit rate: ${((hits / 10) * 100).toFixed(1)}%`)

    // Estad√≠sticas del cache
    const stats = window.smartCache.getStats()
    console.log("üìä Estad√≠sticas actuales:", stats)

    // Limpiar datos de prueba
    for (let i = 0; i < 10; i++) {
      window.smartCache.delete(`test-key-${i}`)
    }

    console.log("‚úÖ Pruebas de cache completadas")
  } catch (error) {
    console.error("‚ùå Error en pruebas de cache:", error)
  }
}

probarCache()
console.groupEnd()

// ===== PASO 4: PRUEBAS DE LAZY LOADING =====
console.group("üîÑ PASO 4: Pruebas de Lazy Loading")

async function probarLazyLoading() {
  try {
    console.log("üß™ Probando lazy loading...")

    if (!window.lazyLoader) {
      console.error("‚ùå Sistema de lazy loading no disponible")
      return
    }

    const startTime = performance.now()

    // Simular carga de componente
    console.log("üì¶ Cargando componente de prueba...")
    const mockComponent = await window.lazyLoader.loadComponent("TestComponent", () =>
      Promise.resolve({
        default: {
          name: "TestComponent",
          template: "<div>Componente de prueba</div>",
        },
      })
    )

    const loadTime = performance.now() - startTime

    console.log(`‚è±Ô∏è Tiempo de carga: ${loadTime.toFixed(2)}ms`)
    console.log("üì¶ Componente cargado:", mockComponent)
    console.log("‚úÖ Pruebas de lazy loading completadas")
  } catch (error) {
    console.error("‚ùå Error en pruebas de lazy loading:", error)
  }
}

probarLazyLoading()
console.groupEnd()

// ===== PASO 5: PRUEBAS DE MEMORIA =====
console.group("üß† PASO 5: Pruebas de Memoria")

function probarMemoria() {
  try {
    console.log("üß™ Probando gesti√≥n de memoria...")

    // Memoria inicial
    const initialMemory = performance.memory ? performance.memory.usedJSHeapSize : 0

    console.log(`üìä Memoria inicial: ${(initialMemory / 1024 / 1024).toFixed(2)} MB`)

    // Crear datos de prueba
    console.log("üíæ Creando datos de prueba...")
    const testData = []
    for (let i = 0; i < 100; i++) {
      testData.push({
        id: i,
        data: new Array(1000).fill(`test-${i}`),
        timestamp: new Date(),
      })
    }

    // Memoria pico
    const peakMemory = performance.memory ? performance.memory.usedJSHeapSize : 0

    console.log(`üìà Memoria pico: ${(peakMemory / 1024 / 1024).toFixed(2)} MB`)
    console.log(`üìä Incremento: ${((peakMemory - initialMemory) / 1024 / 1024).toFixed(2)} MB`)

    // Limpiar datos
    testData.length = 0

    // Forzar garbage collection si est√° disponible
    if ("gc" in window) {
      console.log("üóëÔ∏è Ejecutando garbage collection...")
      window.gc()
    }

    setTimeout(() => {
      const finalMemory = performance.memory ? performance.memory.usedJSHeapSize : 0

      console.log(`üìâ Memoria final: ${(finalMemory / 1024 / 1024).toFixed(2)} MB`)

      const recovered = peakMemory - finalMemory
      const recoveryRate = (recovered / (peakMemory - initialMemory)) * 100

      console.log(`‚ôªÔ∏è Memoria recuperada: ${(recovered / 1024 / 1024).toFixed(2)} MB`)
      console.log(`üìä Tasa de recuperaci√≥n: ${recoveryRate.toFixed(1)}%`)
      console.log("‚úÖ Pruebas de memoria completadas")
    }, 1000)
  } catch (error) {
    console.error("‚ùå Error en pruebas de memoria:", error)
  }
}

probarMemoria()
console.groupEnd()

// ===== PASO 6: SUITE COMPLETA (OPCIONAL) =====
console.group("üéØ PASO 6: Suite Completa (Opcional)")

async function ejecutarSuiteCompleta() {
  try {
    console.log("üöÄ Ejecutando suite completa de pruebas...")
    console.log("‚è≥ Esto puede tomar 2-3 minutos...")

    if (typeof window.runPerformanceTests === "function") {
      const startTime = performance.now()
      const results = await window.runPerformanceTests()
      const totalTime = performance.now() - startTime

      console.log(`‚è±Ô∏è Suite completada en: ${totalTime.toFixed(2)}ms`)
      console.log("üìä Resultados completos:", results)

      // Resumen de resultados
      const {summary} = results
      console.log("üìà RESUMEN DE RESULTADOS:")
      console.log(`   ‚Ä¢ Pruebas totales: ${summary.totalTests}`)
      console.log(`   ‚Ä¢ Pruebas exitosas: ${summary.passedTests}`)
      console.log(`   ‚Ä¢ Pruebas fallidas: ${summary.failedTests}`)
      console.log(
        `   ‚Ä¢ Tasa de √©xito: ${((summary.passedTests / summary.totalTests) * 100).toFixed(1)}%`
      )

      if (summary.criticalIssues.length > 0) {
        console.warn("‚ö†Ô∏è Issues cr√≠ticos encontrados:", summary.criticalIssues)
      }

      if (summary.recommendations.length > 0) {
        console.log("üí° Recomendaciones:", summary.recommendations)
      }
    } else {
      console.warn("‚ùå Funci√≥n de suite completa no disponible")
    }
  } catch (error) {
    console.error("‚ùå Error en suite completa:", error)
  }
}

// No ejecutar autom√°ticamente - dejar que el usuario decida
console.log("üéØ Para ejecutar la suite completa, ejecuta: ejecutarSuiteCompleta()")
window.ejecutarSuiteCompleta = ejecutarSuiteCompleta

console.groupEnd()

// ===== FUNCIONES ADICIONALES =====
console.group("üõ†Ô∏è FUNCIONES ADICIONALES DISPONIBLES")

// Funci√≥n para monitoreo continuo
window.iniciarMonitoreo = function () {
  console.log("üìä Iniciando monitoreo continuo...")

  const interval = setInterval(() => {
    if (window.performanceMonitor) {
      const report = window.performanceMonitor.generateReport()
      console.log(`üìà [${new Date().toLocaleTimeString()}] M√©tricas:`, {
        loadTime: `${report.summary.avgLoadTime.toFixed(0)}ms`,
        interactionTime: `${report.summary.avgInteractionTime.toFixed(0)}ms`,
        memoryUsage: `${(report.summary.memoryUsage / 1024 / 1024).toFixed(1)}MB`,
        componentsTracked: report.summary.componentsTracked,
      })
    }
  }, 30000) // Cada 30 segundos

  console.log("‚úÖ Monitoreo iniciado (cada 30 segundos)")
  console.log("üõë Para detener: clearInterval(" + interval + ")")

  return interval
}

// Funci√≥n para limpiar todo
window.limpiarSistemas = function () {
  console.log("üßπ Limpiando sistemas...")

  if (window.smartCache) {
    window.smartCache.clear()
    console.log("‚úÖ Cache limpiado")
  }

  if (window.imageOptimizer) {
    window.imageOptimizer.clearCache()
    console.log("‚úÖ Cache de im√°genes limpiado")
  }

  console.log("‚úÖ Sistemas limpiados")
}

console.log("üìä iniciarMonitoreo() - Inicia monitoreo cada 30 segundos")
console.log("üßπ limpiarSistemas() - Limpia todos los caches")
console.log("üéØ ejecutarSuiteCompleta() - Ejecuta suite completa de pruebas")

console.groupEnd()

console.log("üéâ SCRIPT DE PRUEBAS CARGADO - ¬°Listo para usar!")
console.log("üí° Tip: Abre las DevTools (F12) para ver todos los logs detallados")
